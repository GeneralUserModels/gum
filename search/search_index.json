{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"General User Models","text":"<p>General User Models learn about you by observing any interaction you have with your computer. The GUM takes as input any unstructured observation of a user (e.g., device screenshots) and constructs confidence-weighted propositions that capture the user's knowledge and preferences. GUMs introduce an architecture that infers new propositions about a user from multimodal observations, retrieves related propositions for context, and continuously revises existing propositions.</p> <p>tl;dr Everything you do can be used to make your systems more context-aware.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>First, you'll need to install the GUM package. There are two ways to do it:</p> <p>Getting Started I: Installing the GUM package</p> pipFrom source <p>Great! Just pip install.</p> <pre><code>&gt; pip install -U gum-ai\n</code></pre> <pre><code>&gt; git clone git@github.com:GeneralUserModels/gum.git\n&gt; cd gum\n&gt; pip install --editable .\n</code></pre> <p>You can start a GUM server directly from the command line. </p> <p>Getting Started II: Starting a GUM server</p> <p>We recommend running this in a tmux or screen session to keep it alive.</p> Local LMs on a GPU server (recommended)OpenAI <p>First, install SGLang and launch its server with your LM.</p> <pre><code>&gt; pip install \"sglang[all]\"\n&gt; pip install flashinfer -i https://flashinfer.ai/whl/cu121/torch2.4/ \n\n&gt; # Launch the screen VLM model\n&gt; CUDA_VISIBLE_DEVICES=0 python -m sglang.launch_server ....\n\n&gt; # Launch the GUM model (note- this can be the same model, so you don't have to launch two)\n&gt; CUDA_VISIBLE_DEVICES=1 python -m sglang.launch_server ....\n\n&gt; # point this to the GUM LM\n&gt; export GUM_LM_API_BASE=\"gum-base-url\"\n\n&gt; # point this to the VLM\n&gt; export SCREEN_LM_API_BASE=\"screen-base-url\"\n\n&gt; gum --user-name \"Your Name\"\n</code></pre> <p>Alternatively, we recommend using SkyPilot to serve and run your own models on the cloud.</p> <p>You can authenticate by setting the <code>OPENAI_API_KEY</code> env variable.</p> <pre><code>&gt; export OPENAI_API_KEY=\"your-api-key-here\"\n&gt; gum --user-name \"Your Name\"\n</code></pre> <p>Once you're all done, go ahead and try querying your GUM to view propositions and observations:</p> <pre><code>&gt; gum --query \"email\"\n</code></pre>"},{"location":"#applications","title":"Applications","text":"<p>Once you're all set up, check out the tutorials here. There are a host of cool applications you can build atop of GUMs.</p> <p>Getting Started III: Querying GUMs with the API</p> <pre><code>import asyncio\nfrom gum import gum\n\ngum_instance = gum(\"Your Name\", model=\"gpt-4.1\")\n\nasync def main():\n    await gum_instance.connect_db()\n    print(await gum_instance.query(\"email\"))\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>To start...</p>"},{"location":"#under-the-hood","title":"Under the hood","text":""},{"location":"#1-observers-collect-raw-interaction-data","title":"1) Observers collect raw interaction data.","text":""},{"location":"#2-audits-optionally-filter-sensitive-observations-for-privacy","title":"2) Audits optionally filter sensitive observations for privacy.","text":""},{"location":"#3-propositions-describe-inferences-made-about-the-user","title":"3) Propositions describe inferences made about the user.","text":""},{"location":"#4-retrieving-from-propositions-enables-a-range-of-interactive","title":"4) Retrieving from propositions enables a range of interactive","text":"<p>applications.</p>"},{"location":"api-reference/core/","title":"Core API Reference","text":"<p>This page provides detailed documentation for the core GUM module.</p>"},{"location":"api-reference/core/#main-class","title":"Main Class","text":""},{"location":"api-reference/core/#gum.gum","title":"<code>gum.gum</code>","text":""},{"location":"api-reference/core/#gum.gum-attributes","title":"Attributes","text":""},{"location":"api-reference/core/#gum.gum-classes","title":"Classes","text":""},{"location":"api-reference/core/#gum.gum.gum","title":"<code>gum(user_name: str, model: str, *observers: Observer, propose_prompt: str | None = None, similar_prompt: str | None = None, revise_prompt: str | None = None, audit_prompt: str | None = None, data_directory: str = '~/.cache/gum', db_name: str = 'gum.db', max_concurrent_updates: int = 4, verbosity: int = logging.INFO, audit_enabled: bool = False, api_base: str | None = None, api_key: str | None = None)</code>","text":"<p>A class for managing user models and simulations.</p> <p>This class provides functionality for observing user behavior, generating and managing propositions about user behavior, and maintaining relationships between observations and propositions.</p> <p>Parameters:</p> Name Type Description Default <code>user_name</code> <code>str</code> <p>The name of the user being modeled.</p> required <code>*observers</code> <code>Observer</code> <p>Variable number of observer instances to track user behavior.</p> <code>()</code> <code>propose_prompt</code> <code>str</code> <p>Custom prompt for proposition generation.</p> <code>None</code> <code>similar_prompt</code> <code>str</code> <p>Custom prompt for similarity analysis.</p> <code>None</code> <code>revise_prompt</code> <code>str</code> <p>Custom prompt for proposition revision.</p> <code>None</code> <code>audit_prompt</code> <code>str</code> <p>Custom prompt for auditing.</p> <code>None</code> <code>data_directory</code> <code>str</code> <p>Directory for storing data. Defaults to \"~/.cache/gum\".</p> <code>'~/.cache/gum'</code> <code>db_name</code> <code>str</code> <p>Name of the database file. Defaults to \"gum.db\".</p> <code>'gum.db'</code> <code>max_concurrent_updates</code> <code>int</code> <p>Maximum number of concurrent updates. Defaults to 4.</p> <code>4</code> <code>verbosity</code> <code>int</code> <p>Logging verbosity level. Defaults to logging.INFO.</p> <code>INFO</code> <code>audit_enabled</code> <code>bool</code> <p>Whether to enable auditing. Defaults to False.</p> <code>False</code> Source code in <code>gum/gum.py</code> <pre><code>def __init__(\n    self,\n    user_name: str,\n    model: str,\n    *observers: Observer,\n    propose_prompt: str | None = None,\n    similar_prompt: str | None = None,\n    revise_prompt: str | None = None,\n    audit_prompt: str | None = None,\n    data_directory: str = \"~/.cache/gum\",\n    db_name: str = \"gum.db\",\n    max_concurrent_updates: int = 4,\n    verbosity: int = logging.INFO,\n    audit_enabled: bool = False,\n    api_base: str | None = None,\n    api_key: str | None = None,\n):\n    # basic paths\n    data_directory = os.path.expanduser(data_directory)\n    os.makedirs(data_directory, exist_ok=True)\n\n    # runtime\n    self.user_name = user_name\n    self.observers: list[Observer] = list(observers)\n    self.model = model\n    self.audit_enabled = audit_enabled\n\n    # logging\n    self.logger = logging.getLogger(\"gum\")\n    self.logger.setLevel(verbosity)\n    if not self.logger.handlers:\n        h = logging.StreamHandler()\n        h.setFormatter(logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\"))\n        self.logger.addHandler(h)\n\n    # prompts\n    self.propose_prompt = propose_prompt or self._load_prompt(\"propose.txt\")\n    self.similar_prompt = similar_prompt or self._load_prompt(\"similar.txt\")\n    self.revise_prompt = revise_prompt or self._load_prompt(\"revise.txt\")\n    self.audit_prompt = audit_prompt or self._load_prompt(\"audit.txt\")\n\n    self.client = AsyncOpenAI(\n        base_url=api_base or os.getenv(\"GUM_LM_API_BASE\"), \n        api_key=api_key or os.getenv(\"GUM_LM_API_KEY\")\n    )\n\n    self.engine = None\n    self.Session = None\n    self._db_name        = db_name\n    self._data_directory = data_directory\n\n    self._update_sem = asyncio.Semaphore(max_concurrent_updates)\n    self._tasks: set[asyncio.Task] = set()\n    self._loop_task: asyncio.Task | None = None\n    self.update_handlers: list[Callable[[Observer, Update], None]] = []\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum-attributes","title":"Attributes","text":""},{"location":"api-reference/core/#gum.gum.gum.Session","title":"<code>Session = None</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.audit_enabled","title":"<code>audit_enabled = audit_enabled</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.audit_prompt","title":"<code>audit_prompt = audit_prompt or self._load_prompt('audit.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.client","title":"<code>client = AsyncOpenAI(base_url=api_base or os.getenv('GUM_LM_API_BASE'), api_key=api_key or os.getenv('GUM_LM_API_KEY'))</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.engine","title":"<code>engine = None</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.logger","title":"<code>logger = logging.getLogger('gum')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.model","title":"<code>model = model</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.observers","title":"<code>observers: list[Observer] = list(observers)</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.propose_prompt","title":"<code>propose_prompt = propose_prompt or self._load_prompt('propose.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.revise_prompt","title":"<code>revise_prompt = revise_prompt or self._load_prompt('revise.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.similar_prompt","title":"<code>similar_prompt = similar_prompt or self._load_prompt('similar.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.update_handlers","title":"<code>update_handlers: list[Callable[[Observer, Update], None]] = []</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.user_name","title":"<code>user_name = user_name</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum-functions","title":"Functions","text":""},{"location":"api-reference/core/#gum.gum.gum.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Async context manager entry point.</p> <p>Returns:</p> Name Type Description <code>gum</code> <p>The instance of the gum class.</p> Source code in <code>gum/gum.py</code> <pre><code>async def __aenter__(self):\n    \"\"\"Async context manager entry point.\n\n    Returns:\n        gum: The instance of the gum class.\n    \"\"\"\n    await self.connect_db()\n    self.start_update_loop()\n    return self\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.__aexit__","title":"<code>__aexit__(exc_type, exc, tb)</code>  <code>async</code>","text":"<p>Async context manager exit point.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <p>The type of exception if any.</p> required <code>exc</code> <p>The exception instance if any.</p> required <code>tb</code> <p>The traceback if any.</p> required Source code in <code>gum/gum.py</code> <pre><code>async def __aexit__(self, exc_type, exc, tb):\n    \"\"\"Async context manager exit point.\n\n    Args:\n        exc_type: The type of exception if any.\n        exc: The exception instance if any.\n        tb: The traceback if any.\n    \"\"\"\n    await self.stop_update_loop()\n\n    # wait for any in-flight handlers\n    if self._tasks:\n        await asyncio.gather(*self._tasks, return_exceptions=True)\n\n    # stop observers\n    for obs in self.observers:\n        await obs.stop()\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.add_observer","title":"<code>add_observer(observer: Observer)</code>","text":"<p>Add an observer to track user behavior.</p> <p>Parameters:</p> Name Type Description Default <code>observer</code> <code>Observer</code> <p>The observer to add.</p> required Source code in <code>gum/gum.py</code> <pre><code>def add_observer(self, observer: Observer):\n    \"\"\"Add an observer to track user behavior.\n\n    Args:\n        observer (Observer): The observer to add.\n    \"\"\"\n    self.observers.append(observer)\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.connect_db","title":"<code>connect_db()</code>  <code>async</code>","text":"<p>Initialize the database connection if not already connected.</p> Source code in <code>gum/gum.py</code> <pre><code>async def connect_db(self):\n    \"\"\"Initialize the database connection if not already connected.\"\"\"\n    if self.engine is None:\n        self.engine, self.Session = await init_db(\n            self._db_name, self._data_directory\n        )\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.query","title":"<code>query(user_query: str, *, limit: int = 3, mode: str = 'OR', start_time: datetime | None = None, end_time: datetime | None = None) -&gt; list[tuple[Proposition, float]]</code>  <code>async</code>","text":"<p>Query the database for propositions matching the user query.</p> <p>Parameters:</p> Name Type Description Default <code>user_query</code> <code>str</code> <p>The query string to search for.</p> required <code>limit</code> <code>int</code> <p>Maximum number of results to return. Defaults to 3.</p> <code>3</code> <code>mode</code> <code>str</code> <p>Search mode (\"OR\" or \"AND\"). Defaults to \"OR\".</p> <code>'OR'</code> <code>start_time</code> <code>datetime</code> <p>Start time for filtering results. Defaults to None.</p> <code>None</code> <code>end_time</code> <code>datetime</code> <p>End time for filtering results. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[tuple[Proposition, float]]</code> <p>list[tuple[Proposition, float]]: List of tuples containing propositions and their relevance scores.</p> Source code in <code>gum/gum.py</code> <pre><code>async def query(\n    self,\n    user_query: str,\n    *,\n    limit: int = 3,\n    mode: str = \"OR\",\n    start_time: datetime | None = None,\n    end_time: datetime | None = None,\n) -&gt; list[tuple[Proposition, float]]:\n    \"\"\"Query the database for propositions matching the user query.\n\n    Args:\n        user_query (str): The query string to search for.\n        limit (int, optional): Maximum number of results to return. Defaults to 3.\n        mode (str, optional): Search mode (\"OR\" or \"AND\"). Defaults to \"OR\".\n        start_time (datetime, optional): Start time for filtering results. Defaults to None.\n        end_time (datetime, optional): End time for filtering results. Defaults to None.\n\n    Returns:\n        list[tuple[Proposition, float]]: List of tuples containing propositions and their relevance scores.\n    \"\"\"\n    async with self._session() as session:\n        return await search_propositions_bm25(\n            session,\n            user_query,\n            limit=limit,\n            mode=mode,\n            start_time=start_time,\n            end_time=end_time,\n        )\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.register_update_handler","title":"<code>register_update_handler(fn: Callable[[Observer, Update], None])</code>","text":"<p>Register a custom update handler function.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[Observer, Update], None]</code> <p>The handler function to register.</p> required Source code in <code>gum/gum.py</code> <pre><code>def register_update_handler(self, fn: Callable[[Observer, Update], None]):\n    \"\"\"Register a custom update handler function.\n\n    Args:\n        fn (Callable[[Observer, Update], None]): The handler function to register.\n    \"\"\"\n    self.update_handlers.append(fn)\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.remove_observer","title":"<code>remove_observer(observer: Observer)</code>","text":"<p>Remove an observer from tracking.</p> <p>Parameters:</p> Name Type Description Default <code>observer</code> <code>Observer</code> <p>The observer to remove.</p> required Source code in <code>gum/gum.py</code> <pre><code>def remove_observer(self, observer: Observer):\n    \"\"\"Remove an observer from tracking.\n\n    Args:\n        observer (Observer): The observer to remove.\n    \"\"\"\n    if observer in self.observers:\n        self.observers.remove(observer)\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.start_update_loop","title":"<code>start_update_loop()</code>","text":"<p>Start the asynchronous update loop for processing observer updates.</p> Source code in <code>gum/gum.py</code> <pre><code>def start_update_loop(self):\n    \"\"\"Start the asynchronous update loop for processing observer updates.\"\"\"\n    if self._loop_task is None:\n        self._loop_task = asyncio.create_task(self._update_loop())\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.stop_update_loop","title":"<code>stop_update_loop()</code>  <code>async</code>","text":"<p>Stop the asynchronous update loop and clean up resources.</p> Source code in <code>gum/gum.py</code> <pre><code>async def stop_update_loop(self):\n    \"\"\"Stop the asynchronous update loop and clean up resources.\"\"\"\n    if self._loop_task:\n        self._loop_task.cancel()\n        try:\n            await self._loop_task\n        except asyncio.CancelledError:\n            pass\n        self._loop_task = None\n</code></pre>"},{"location":"api-reference/core/#gum.gum-functions","title":"Functions","text":""},{"location":"api-reference/models/","title":"Models API Reference","text":"<p>This page provides detailed documentation for the GUM models.</p>"},{"location":"api-reference/models/#models","title":"Models","text":""},{"location":"api-reference/models/#gum.models.Observation","title":"<code>gum.models.Observation</code>","text":"<p>               Bases: <code>Base</code></p> <p>Represents an observation of user behavior.</p> <p>This model stores observations made by various observers about user behavior, including the content of the observation and metadata about when and how it was made.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key for the observation.</p> <code>observer_name</code> <code>str</code> <p>Name of the observer that made this observation.</p> <code>content</code> <code>str</code> <p>The actual content of the observation.</p> <code>content_type</code> <code>str</code> <p>Type of content (e.g., 'text', 'image', etc.).</p> <code>created_at</code> <code>datetime</code> <p>When the observation was created.</p> <code>updated_at</code> <code>datetime</code> <p>When the observation was last updated.</p> <code>propositions</code> <code>set[Proposition]</code> <p>Set of propositions related to this observation.</p>"},{"location":"api-reference/models/#gum.models.Observation-attributes","title":"Attributes","text":""},{"location":"api-reference/models/#gum.models.Observation.__tablename__","title":"<code>__tablename__ = 'observations'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.content","title":"<code>content: Mapped[str] = mapped_column(Text, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.content_type","title":"<code>content_type: Mapped[str] = mapped_column(String(50), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.created_at","title":"<code>created_at: Mapped[str] = mapped_column(DateTime(timezone=True), server_default=func.now(), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.id","title":"<code>id: Mapped[int] = mapped_column(primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.observer_name","title":"<code>observer_name: Mapped[str] = mapped_column(String(100), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.propositions","title":"<code>propositions: Mapped[set['Proposition']] = relationship('Proposition', secondary=observation_proposition, back_populates='observations', collection_class=set, passive_deletes=True, lazy='selectin')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.updated_at","title":"<code>updated_at: Mapped[str] = mapped_column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation-functions","title":"Functions","text":""},{"location":"api-reference/models/#gum.models.Observation.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"<p>String representation of the observation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representation showing the observation ID and observer name.</p> Source code in <code>gum/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the observation.\n\n    Returns:\n        str: A string representation showing the observation ID and observer name.\n    \"\"\"\n    return f\"&lt;Observation(id={self.id}, observer={self.observer_name})&gt;\"\n</code></pre>"},{"location":"api-reference/models/#gum.models.Proposition","title":"<code>gum.models.Proposition</code>","text":"<p>               Bases: <code>Base</code></p> <p>Represents a proposition about user behavior.</p> <p>This model stores propositions generated from observations, including the proposition text, reasoning behind it, and metadata about its creation and relationships.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key for the proposition.</p> <code>text</code> <code>str</code> <p>The actual proposition text.</p> <code>reasoning</code> <code>str</code> <p>The reasoning behind this proposition.</p> <code>confidence</code> <code>Optional[int]</code> <p>Confidence level in this proposition.</p> <code>decay</code> <code>Optional[int]</code> <p>Decay factor for this proposition.</p> <code>created_at</code> <code>datetime</code> <p>When the proposition was created.</p> <code>updated_at</code> <code>datetime</code> <p>When the proposition was last updated.</p> <code>revision_group</code> <code>str</code> <p>Group identifier for related proposition revisions.</p> <code>version</code> <code>int</code> <p>Version number of this proposition.</p> <code>parents</code> <code>set[Proposition]</code> <p>Set of parent propositions.</p> <code>observations</code> <code>set[Observation]</code> <p>Set of observations related to this proposition.</p>"},{"location":"api-reference/models/#gum.models.Proposition-attributes","title":"Attributes","text":""},{"location":"api-reference/models/#gum.models.Proposition.__tablename__","title":"<code>__tablename__ = 'propositions'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.confidence","title":"<code>confidence: Mapped[Optional[int]]</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.created_at","title":"<code>created_at: Mapped[str] = mapped_column(DateTime(timezone=True), server_default=func.now(), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.decay","title":"<code>decay: Mapped[Optional[int]]</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.id","title":"<code>id: Mapped[int] = mapped_column(primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.observations","title":"<code>observations: Mapped[set[Observation]] = relationship('Observation', secondary=observation_proposition, back_populates='propositions', collection_class=set, passive_deletes=True, lazy='selectin')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.parents","title":"<code>parents: Mapped[set['Proposition']] = relationship('Proposition', secondary=proposition_parent, primaryjoin=id == proposition_parent.c.child_id, secondaryjoin=id == proposition_parent.c.parent_id, backref='children', collection_class=set, lazy='selectin')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.reasoning","title":"<code>reasoning: Mapped[str] = mapped_column(Text, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.revision_group","title":"<code>revision_group: Mapped[str] = mapped_column(String(36), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.text","title":"<code>text: Mapped[str] = mapped_column(Text, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.updated_at","title":"<code>updated_at: Mapped[str] = mapped_column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.version","title":"<code>version: Mapped[int] = mapped_column(Integer, server_default='1', nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition-functions","title":"Functions","text":""},{"location":"api-reference/models/#gum.models.Proposition.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"<p>String representation of the proposition.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representation showing the proposition ID and a preview of its text.</p> Source code in <code>gum/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the proposition.\n\n    Returns:\n        str: A string representation showing the proposition ID and a preview of its text.\n    \"\"\"\n    preview = (self.text[:27] + \"\u2026\") if len(self.text) &gt; 30 else self.text\n    return f\"&lt;Proposition(id={self.id}, text={preview})&gt;\"\n</code></pre>"},{"location":"api-reference/observers/","title":"Observers API Reference","text":"<p>This page provides detailed documentation for the observers in GUM.</p>"},{"location":"api-reference/observers/#base-observer","title":"Base Observer","text":""},{"location":"api-reference/observers/#gum.observers.Observer","title":"<code>gum.observers.Observer(name: Optional[str] = None)</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for all observers in the GUM system.</p> <p>This abstract base class defines the interface for all observers that monitor user behavior. Observers are responsible for collecting data about user interactions and sending updates through an asynchronous queue.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>A custom name for the observer. If not provided, the class name will be used.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>update_queue</code> <code>Queue</code> <p>Queue for sending updates to the main GUM system.</p> <code>_name</code> <code>str</code> <p>The name of the observer.</p> <code>_running</code> <code>bool</code> <p>Flag indicating if the observer is currently running.</p> <code>_task</code> <code>Optional[Task]</code> <p>Background task handle for the observer's worker.</p> Source code in <code>gum/observers/observer.py</code> <pre><code>def __init__(self, name: Optional[str] = None) -&gt; None:\n    self.update_queue = asyncio.Queue()\n    self._name = name or self.__class__.__name__\n\n    # running flag + background task handle\n    self._running = True\n    self._task: asyncio.Task | None = asyncio.create_task(self._worker_wrapper())\n</code></pre>"},{"location":"api-reference/observers/#gum.observers.Observer-attributes","title":"Attributes","text":""},{"location":"api-reference/observers/#gum.observers.Observer.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Get the name of the observer.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The observer's name.</p>"},{"location":"api-reference/observers/#gum.observers.Observer.update_queue","title":"<code>update_queue = asyncio.Queue()</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/observers/#gum.observers.Observer-functions","title":"Functions","text":""},{"location":"api-reference/observers/#gum.observers.Observer.get_update","title":"<code>get_update()</code>  <code>async</code>","text":"<p>Get the next update from the queue if available.</p> <p>Returns:</p> Type Description <p>Optional[Update]: The next update from the queue, or None if the queue is empty.</p> Source code in <code>gum/observers/observer.py</code> <pre><code>async def get_update(self):\n    \"\"\"Get the next update from the queue if available.\n\n    Returns:\n        Optional[Update]: The next update from the queue, or None if the queue is empty.\n    \"\"\"\n    try:\n        return self.update_queue.get_nowait()\n    except asyncio.QueueEmpty:\n        return None\n</code></pre>"},{"location":"api-reference/observers/#gum.observers.Observer.stop","title":"<code>stop() -&gt; None</code>  <code>async</code>","text":"<p>Stop the observer and clean up resources.</p> <p>This method cancels the worker task and drains the update queue.</p> Source code in <code>gum/observers/observer.py</code> <pre><code>async def stop(self) -&gt; None:\n    \"\"\"Stop the observer and clean up resources.\n\n    This method cancels the worker task and drains the update queue.\n    \"\"\"\n    if self._task and not self._task.done():\n        self._task.cancel()\n        try:\n            await self._task\n        except asyncio.CancelledError:\n            pass\n    # unblock any awaiters\n    while not self.update_queue.empty():\n        self.update_queue.get_nowait()\n</code></pre>"},{"location":"api-reference/observers/#screen-observer","title":"Screen Observer","text":""},{"location":"api-reference/observers/#gum.observers.Screen","title":"<code>gum.observers.Screen(screenshots_dir: str = '~/.cache/gum/screenshots', skip_when_visible: Optional[str | list[str]] = None, transcription_prompt: Optional[str] = None, summary_prompt: Optional[str] = None, model_name: str = 'gpt-4o-mini', history_k: int = 10, debug: bool = False, api_key: str | None = None, api_base: str | None = None)</code>","text":"<p>               Bases: <code>Observer</code></p> <p>Observer that captures and analyzes screen content around user interactions.</p> <p>This observer captures screenshots before and after user interactions (mouse movements, clicks, and scrolls) and uses GPT-4 Vision to analyze the content. It can also take periodic screenshots and skip captures when certain applications are visible.</p> <p>Parameters:</p> Name Type Description Default <code>screenshots_dir</code> <code>str</code> <p>Directory to store screenshots. Defaults to \"~/.cache/gum/screenshots\".</p> <code>'~/.cache/gum/screenshots'</code> <code>skip_when_visible</code> <code>Optional[str | list[str]]</code> <p>Application names to skip when visible. Defaults to None.</p> <code>None</code> <code>transcription_prompt</code> <code>Optional[str]</code> <p>Custom prompt for transcribing screenshots. Defaults to None.</p> <code>None</code> <code>summary_prompt</code> <code>Optional[str]</code> <p>Custom prompt for summarizing screenshots. Defaults to None.</p> <code>None</code> <code>model_name</code> <code>str</code> <p>GPT model to use for vision analysis. Defaults to \"gpt-4o-mini\".</p> <code>'gpt-4o-mini'</code> <code>history_k</code> <code>int</code> <p>Number of recent screenshots to keep in history. Defaults to 10.</p> <code>10</code> <code>debug</code> <code>bool</code> <p>Enable debug logging. Defaults to False.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>_CAPTURE_FPS</code> <code>int</code> <p>Frames per second for screen capture.</p> <code>_PERIODIC_SEC</code> <code>int</code> <p>Seconds between periodic screenshots.</p> <code>_DEBOUNCE_SEC</code> <code>int</code> <p>Seconds to wait before processing an interaction.</p> <code>_MON_START</code> <code>int</code> <p>Index of first real display in mss.</p> <p>Initialize the Screen observer.</p> <p>Parameters:</p> Name Type Description Default <code>screenshots_dir</code> <code>str</code> <p>Directory to store screenshots. Defaults to \"~/.cache/gum/screenshots\".</p> <code>'~/.cache/gum/screenshots'</code> <code>skip_when_visible</code> <code>Optional[str | list[str]]</code> <p>Application names to skip when visible. Defaults to None.</p> <code>None</code> <code>transcription_prompt</code> <code>Optional[str]</code> <p>Custom prompt for transcribing screenshots. Defaults to None.</p> <code>None</code> <code>summary_prompt</code> <code>Optional[str]</code> <p>Custom prompt for summarizing screenshots. Defaults to None.</p> <code>None</code> <code>model_name</code> <code>str</code> <p>GPT model to use for vision analysis. Defaults to \"gpt-4o-mini\".</p> <code>'gpt-4o-mini'</code> <code>history_k</code> <code>int</code> <p>Number of recent screenshots to keep in history. Defaults to 10.</p> <code>10</code> <code>debug</code> <code>bool</code> <p>Enable debug logging. Defaults to False.</p> <code>False</code> Source code in <code>gum/observers/screen.py</code> <pre><code>def __init__(\n    self,\n    screenshots_dir: str = \"~/.cache/gum/screenshots\",\n    skip_when_visible: Optional[str | list[str]] = None,\n    transcription_prompt: Optional[str] = None,\n    summary_prompt: Optional[str] = None,\n    model_name: str = \"gpt-4o-mini\",\n    history_k: int = 10,\n    debug: bool = False,\n    api_key: str | None = None,\n    api_base: str | None = None,\n) -&gt; None:\n    \"\"\"Initialize the Screen observer.\n\n    Args:\n        screenshots_dir (str, optional): Directory to store screenshots. Defaults to \"~/.cache/gum/screenshots\".\n        skip_when_visible (Optional[str | list[str]], optional): Application names to skip when visible.\n            Defaults to None.\n        transcription_prompt (Optional[str], optional): Custom prompt for transcribing screenshots.\n            Defaults to None.\n        summary_prompt (Optional[str], optional): Custom prompt for summarizing screenshots.\n            Defaults to None.\n        model_name (str, optional): GPT model to use for vision analysis. Defaults to \"gpt-4o-mini\".\n        history_k (int, optional): Number of recent screenshots to keep in history. Defaults to 10.\n        debug (bool, optional): Enable debug logging. Defaults to False.\n    \"\"\"\n    self.screens_dir = os.path.abspath(os.path.expanduser(screenshots_dir))\n    os.makedirs(self.screens_dir, exist_ok=True)\n\n    self._guard = {skip_when_visible} if isinstance(skip_when_visible, str) else set(skip_when_visible or [])\n\n    self.transcription_prompt = transcription_prompt or self._load_prompt(\"transcribe.txt\")\n    self.summary_prompt = summary_prompt or self._load_prompt(\"summarize.txt\")\n    self.model_name = model_name\n\n    self.debug = debug\n\n    # state shared with worker\n    self._frames: Dict[int, Any] = {}\n    self._frame_lock = asyncio.Lock()\n\n    self._history: deque[str] = deque(maxlen=max(0, history_k))\n    self._pending_event: Optional[dict] = None\n    self._debounce_handle: Optional[asyncio.TimerHandle] = None\n    self.client = AsyncOpenAI(\n        base_url=api_base or os.getenv(\"SCREEN_LM_API_BASE\"), \n        api_key=api_key or os.getenv(\"SCREEN_LM_API_KEY\")\n    )\n\n    # call parent\n    super().__init__()\n</code></pre>"},{"location":"api-reference/observers/#gum.observers.Screen-attributes","title":"Attributes","text":""},{"location":"api-reference/observers/#gum.observers.Screen.client","title":"<code>client = AsyncOpenAI(base_url=api_base or os.getenv('SCREEN_LM_API_BASE'), api_key=api_key or os.getenv('SCREEN_LM_API_KEY'))</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/observers/#gum.observers.Screen.debug","title":"<code>debug = debug</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/observers/#gum.observers.Screen.model_name","title":"<code>model_name = model_name</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/observers/#gum.observers.Screen.screens_dir","title":"<code>screens_dir = os.path.abspath(os.path.expanduser(screenshots_dir))</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/observers/#gum.observers.Screen.summary_prompt","title":"<code>summary_prompt = summary_prompt or self._load_prompt('summarize.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/observers/#gum.observers.Screen.transcription_prompt","title":"<code>transcription_prompt = transcription_prompt or self._load_prompt('transcribe.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/observers/#gum.observers.Screen-functions","title":"Functions","text":""},{"location":"tutorials/gumbo/","title":"GUMBO: A Proactive Assistant","text":""},{"location":"tutorials/mcp/","title":"Using MCPs to connect to GUMs","text":""},{"location":"tutorials/reflection/","title":"A simple self reflection tool","text":""},{"location":"tutorials/slackbot/","title":"A GUM-based Slackbot","text":""}]}