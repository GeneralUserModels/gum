{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GUM Documentation","text":"<p>Welcome to the documentation for GUM (General User Models), a powerful library for working with user models and simulations.</p>"},{"location":"#what-is-gum","title":"What is GUM?","text":"<p>GUM is a Python library designed to help developers and researchers work with user models and simulations. It provides a flexible and extensible framework for creating, managing, and analyzing user models.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Easy-to-use API for creating and managing user models</li> <li>Support for various types of user simulations</li> <li>Extensible architecture for custom model implementations</li> <li>Comprehensive documentation and examples</li> <li>Active community support</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with GUM, check out the following resources:</p> <ul> <li>Installation Guide</li> <li>Quick Start Tutorial</li> <li>Basic Usage Guide</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our GitHub repository for more information on how to contribute.</p>"},{"location":"#license","title":"License","text":"<p>GUM is released under the MIT License. See the LICENSE file for details. </p>"},{"location":"api-reference/core/","title":"Core API Reference","text":"<p>This page provides detailed documentation for the core GUM module.</p>"},{"location":"api-reference/core/#main-class","title":"Main Class","text":""},{"location":"api-reference/core/#gum.gum.gum","title":"<code>gum.gum.gum(user_name: str, *observers: Observer, propose_prompt: str | None = None, similar_prompt: str | None = None, revise_prompt: str | None = None, audit_prompt: str | None = None, data_directory: str = '~/.cache/gum', db_name: str = 'gum.db', max_concurrent_updates: int = 4, verbosity: int = logging.INFO, audit_enabled: bool = False)</code>","text":"<p>A class for managing user models and simulations.</p> <p>This class provides functionality for observing user behavior, generating and managing propositions about user behavior, and maintaining relationships between observations and propositions.</p> <p>Parameters:</p> Name Type Description Default <code>user_name</code> <code>str</code> <p>The name of the user being modeled.</p> required <code>*observers</code> <code>Observer</code> <p>Variable number of observer instances to track user behavior.</p> <code>()</code> <code>propose_prompt</code> <code>str</code> <p>Custom prompt for proposition generation.</p> <code>None</code> <code>similar_prompt</code> <code>str</code> <p>Custom prompt for similarity analysis.</p> <code>None</code> <code>revise_prompt</code> <code>str</code> <p>Custom prompt for proposition revision.</p> <code>None</code> <code>audit_prompt</code> <code>str</code> <p>Custom prompt for auditing.</p> <code>None</code> <code>data_directory</code> <code>str</code> <p>Directory for storing data. Defaults to \"~/.cache/gum\".</p> <code>'~/.cache/gum'</code> <code>db_name</code> <code>str</code> <p>Name of the database file. Defaults to \"gum.db\".</p> <code>'gum.db'</code> <code>max_concurrent_updates</code> <code>int</code> <p>Maximum number of concurrent updates. Defaults to 4.</p> <code>4</code> <code>verbosity</code> <code>int</code> <p>Logging verbosity level. Defaults to logging.INFO.</p> <code>INFO</code> <code>audit_enabled</code> <code>bool</code> <p>Whether to enable auditing. Defaults to False.</p> <code>False</code> Source code in <code>gum/gum.py</code> <pre><code>def __init__(\n    self,\n    user_name: str,\n    *observers: Observer,\n    propose_prompt: str | None = None,\n    similar_prompt: str | None = None,\n    revise_prompt: str | None = None,\n    audit_prompt: str | None = None,\n    data_directory: str = \"~/.cache/gum\",\n    db_name: str = \"gum.db\",\n    max_concurrent_updates: int = 4,\n    verbosity: int = logging.INFO,\n    audit_enabled: bool = False,\n):\n    # basic paths\n    data_directory = os.path.expanduser(data_directory)\n    os.makedirs(data_directory, exist_ok=True)\n\n    # runtime\n    self.user_name = user_name\n    self.observers: list[Observer] = list(observers)\n    self.model = \"gpt-4.1\"\n    self.audit_enabled = audit_enabled\n\n    # logging\n    self.logger = logging.getLogger(\"gum\")\n    self.logger.setLevel(verbosity)\n    if not self.logger.handlers:\n        h = logging.StreamHandler()\n        h.setFormatter(logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\"))\n        self.logger.addHandler(h)\n\n    # prompts\n    self.propose_prompt = propose_prompt or self._load_prompt(\"propose.txt\")\n    self.similar_prompt = similar_prompt or self._load_prompt(\"similar.txt\")\n    self.revise_prompt = revise_prompt or self._load_prompt(\"revise.txt\")\n    self.audit_prompt = audit_prompt or self._load_prompt(\"audit.txt\")\n\n    self.engine = None\n    self.Session = None\n    self._db_name        = db_name\n    self._data_directory = data_directory\n\n    self._update_sem = asyncio.Semaphore(max_concurrent_updates)\n    self._tasks: set[asyncio.Task] = set()\n    self._loop_task: asyncio.Task | None = None\n    self.update_handlers: list[Callable[[Observer, Update], None]] = []\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum-attributes","title":"Attributes","text":""},{"location":"api-reference/core/#gum.gum.gum.Session","title":"<code>Session = None</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.audit_enabled","title":"<code>audit_enabled = audit_enabled</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.audit_prompt","title":"<code>audit_prompt = audit_prompt or self._load_prompt('audit.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.engine","title":"<code>engine = None</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.logger","title":"<code>logger = logging.getLogger('gum')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.model","title":"<code>model = 'gpt-4.1'</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.observers","title":"<code>observers: list[Observer] = list(observers)</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.propose_prompt","title":"<code>propose_prompt = propose_prompt or self._load_prompt('propose.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.revise_prompt","title":"<code>revise_prompt = revise_prompt or self._load_prompt('revise.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.similar_prompt","title":"<code>similar_prompt = similar_prompt or self._load_prompt('similar.txt')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.update_handlers","title":"<code>update_handlers: list[Callable[[Observer, Update], None]] = []</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum.user_name","title":"<code>user_name = user_name</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/core/#gum.gum.gum-functions","title":"Functions","text":""},{"location":"api-reference/core/#gum.gum.gum.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Async context manager entry point.</p> <p>Returns:</p> Name Type Description <code>gum</code> <p>The instance of the gum class.</p> Source code in <code>gum/gum.py</code> <pre><code>async def __aenter__(self):\n    \"\"\"Async context manager entry point.\n\n    Returns:\n        gum: The instance of the gum class.\n    \"\"\"\n    await self.connect_db()\n    self.start_update_loop()\n    return self\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.__aexit__","title":"<code>__aexit__(exc_type, exc, tb)</code>  <code>async</code>","text":"<p>Async context manager exit point.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <p>The type of exception if any.</p> required <code>exc</code> <p>The exception instance if any.</p> required <code>tb</code> <p>The traceback if any.</p> required Source code in <code>gum/gum.py</code> <pre><code>async def __aexit__(self, exc_type, exc, tb):\n    \"\"\"Async context manager exit point.\n\n    Args:\n        exc_type: The type of exception if any.\n        exc: The exception instance if any.\n        tb: The traceback if any.\n    \"\"\"\n    await self.stop_update_loop()\n\n    # wait for any in-flight handlers\n    if self._tasks:\n        await asyncio.gather(*self._tasks, return_exceptions=True)\n\n    # stop observers\n    for obs in self.observers:\n        await obs.stop()\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.add_observer","title":"<code>add_observer(observer: Observer)</code>","text":"<p>Add an observer to track user behavior.</p> <p>Parameters:</p> Name Type Description Default <code>observer</code> <code>Observer</code> <p>The observer to add.</p> required Source code in <code>gum/gum.py</code> <pre><code>def add_observer(self, observer: Observer):\n    \"\"\"Add an observer to track user behavior.\n\n    Args:\n        observer (Observer): The observer to add.\n    \"\"\"\n    self.observers.append(observer)\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.connect_db","title":"<code>connect_db()</code>  <code>async</code>","text":"<p>Initialize the database connection if not already connected.</p> Source code in <code>gum/gum.py</code> <pre><code>async def connect_db(self):\n    \"\"\"Initialize the database connection if not already connected.\"\"\"\n    if self.engine is None:\n        self.engine, self.Session = await init_db(\n            self._db_name, self._data_directory\n        )\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.query","title":"<code>query(user_query: str, *, limit: int = 3, mode: str = 'OR', start_time: datetime | None = None, end_time: datetime | None = None) -&gt; list[tuple[Proposition, float]]</code>  <code>async</code>","text":"<p>Query the database for propositions matching the user query.</p> <p>Parameters:</p> Name Type Description Default <code>user_query</code> <code>str</code> <p>The query string to search for.</p> required <code>limit</code> <code>int</code> <p>Maximum number of results to return. Defaults to 3.</p> <code>3</code> <code>mode</code> <code>str</code> <p>Search mode (\"OR\" or \"AND\"). Defaults to \"OR\".</p> <code>'OR'</code> <code>start_time</code> <code>datetime</code> <p>Start time for filtering results. Defaults to None.</p> <code>None</code> <code>end_time</code> <code>datetime</code> <p>End time for filtering results. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[tuple[Proposition, float]]</code> <p>list[tuple[Proposition, float]]: List of tuples containing propositions and their relevance scores.</p> Source code in <code>gum/gum.py</code> <pre><code>async def query(\n    self,\n    user_query: str,\n    *,\n    limit: int = 3,\n    mode: str = \"OR\",\n    start_time: datetime | None = None,\n    end_time: datetime | None = None,\n) -&gt; list[tuple[Proposition, float]]:\n    \"\"\"Query the database for propositions matching the user query.\n\n    Args:\n        user_query (str): The query string to search for.\n        limit (int, optional): Maximum number of results to return. Defaults to 3.\n        mode (str, optional): Search mode (\"OR\" or \"AND\"). Defaults to \"OR\".\n        start_time (datetime, optional): Start time for filtering results. Defaults to None.\n        end_time (datetime, optional): End time for filtering results. Defaults to None.\n\n    Returns:\n        list[tuple[Proposition, float]]: List of tuples containing propositions and their relevance scores.\n    \"\"\"\n    async with self._session() as session:\n        return await search_propositions_bm25(\n            session,\n            user_query,\n            limit=limit,\n            mode=mode,\n            start_time=start_time,\n            end_time=end_time,\n        )\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.register_update_handler","title":"<code>register_update_handler(fn: Callable[[Observer, Update], None])</code>","text":"<p>Register a custom update handler function.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[Observer, Update], None]</code> <p>The handler function to register.</p> required Source code in <code>gum/gum.py</code> <pre><code>def register_update_handler(self, fn: Callable[[Observer, Update], None]):\n    \"\"\"Register a custom update handler function.\n\n    Args:\n        fn (Callable[[Observer, Update], None]): The handler function to register.\n    \"\"\"\n    self.update_handlers.append(fn)\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.remove_observer","title":"<code>remove_observer(observer: Observer)</code>","text":"<p>Remove an observer from tracking.</p> <p>Parameters:</p> Name Type Description Default <code>observer</code> <code>Observer</code> <p>The observer to remove.</p> required Source code in <code>gum/gum.py</code> <pre><code>def remove_observer(self, observer: Observer):\n    \"\"\"Remove an observer from tracking.\n\n    Args:\n        observer (Observer): The observer to remove.\n    \"\"\"\n    if observer in self.observers:\n        self.observers.remove(observer)\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.start_update_loop","title":"<code>start_update_loop()</code>","text":"<p>Start the asynchronous update loop for processing observer updates.</p> Source code in <code>gum/gum.py</code> <pre><code>def start_update_loop(self):\n    \"\"\"Start the asynchronous update loop for processing observer updates.\"\"\"\n    if self._loop_task is None:\n        self._loop_task = asyncio.create_task(self._update_loop())\n</code></pre>"},{"location":"api-reference/core/#gum.gum.gum.stop_update_loop","title":"<code>stop_update_loop()</code>  <code>async</code>","text":"<p>Stop the asynchronous update loop and clean up resources.</p> Source code in <code>gum/gum.py</code> <pre><code>async def stop_update_loop(self):\n    \"\"\"Stop the asynchronous update loop and clean up resources.\"\"\"\n    if self._loop_task:\n        self._loop_task.cancel()\n        try:\n            await self._loop_task\n        except asyncio.CancelledError:\n            pass\n        self._loop_task = None\n</code></pre>"},{"location":"api-reference/models/","title":"Models API Reference","text":"<p>This page provides detailed documentation for the GUM models.</p>"},{"location":"api-reference/models/#models","title":"Models","text":""},{"location":"api-reference/models/#gum.models.Observation","title":"<code>gum.models.Observation</code>","text":"<p>               Bases: <code>Base</code></p> <p>Represents an observation of user behavior.</p> <p>This model stores observations made by various observers about user behavior, including the content of the observation and metadata about when and how it was made.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key for the observation.</p> <code>observer_name</code> <code>str</code> <p>Name of the observer that made this observation.</p> <code>content</code> <code>str</code> <p>The actual content of the observation.</p> <code>content_type</code> <code>str</code> <p>Type of content (e.g., 'text', 'image', etc.).</p> <code>created_at</code> <code>datetime</code> <p>When the observation was created.</p> <code>updated_at</code> <code>datetime</code> <p>When the observation was last updated.</p> <code>propositions</code> <code>set[Proposition]</code> <p>Set of propositions related to this observation.</p>"},{"location":"api-reference/models/#gum.models.Observation-attributes","title":"Attributes","text":""},{"location":"api-reference/models/#gum.models.Observation.__tablename__","title":"<code>__tablename__ = 'observations'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.content","title":"<code>content: Mapped[str] = mapped_column(Text, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.content_type","title":"<code>content_type: Mapped[str] = mapped_column(String(50), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.created_at","title":"<code>created_at: Mapped[str] = mapped_column(DateTime(timezone=True), server_default=func.now(), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.id","title":"<code>id: Mapped[int] = mapped_column(primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.observer_name","title":"<code>observer_name: Mapped[str] = mapped_column(String(100), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.propositions","title":"<code>propositions: Mapped[set['Proposition']] = relationship('Proposition', secondary=observation_proposition, back_populates='observations', collection_class=set, passive_deletes=True, lazy='selectin')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation.updated_at","title":"<code>updated_at: Mapped[str] = mapped_column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Observation-functions","title":"Functions","text":""},{"location":"api-reference/models/#gum.models.Observation.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"<p>String representation of the observation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representation showing the observation ID and observer name.</p> Source code in <code>gum/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the observation.\n\n    Returns:\n        str: A string representation showing the observation ID and observer name.\n    \"\"\"\n    return f\"&lt;Observation(id={self.id}, observer={self.observer_name})&gt;\"\n</code></pre>"},{"location":"api-reference/models/#gum.models.Proposition","title":"<code>gum.models.Proposition</code>","text":"<p>               Bases: <code>Base</code></p> <p>Represents a proposition about user behavior.</p> <p>This model stores propositions generated from observations, including the proposition text, reasoning behind it, and metadata about its creation and relationships.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key for the proposition.</p> <code>text</code> <code>str</code> <p>The actual proposition text.</p> <code>reasoning</code> <code>str</code> <p>The reasoning behind this proposition.</p> <code>confidence</code> <code>Optional[int]</code> <p>Confidence level in this proposition.</p> <code>decay</code> <code>Optional[int]</code> <p>Decay factor for this proposition.</p> <code>created_at</code> <code>datetime</code> <p>When the proposition was created.</p> <code>updated_at</code> <code>datetime</code> <p>When the proposition was last updated.</p> <code>revision_group</code> <code>str</code> <p>Group identifier for related proposition revisions.</p> <code>version</code> <code>int</code> <p>Version number of this proposition.</p> <code>parents</code> <code>set[Proposition]</code> <p>Set of parent propositions.</p> <code>observations</code> <code>set[Observation]</code> <p>Set of observations related to this proposition.</p>"},{"location":"api-reference/models/#gum.models.Proposition-attributes","title":"Attributes","text":""},{"location":"api-reference/models/#gum.models.Proposition.__tablename__","title":"<code>__tablename__ = 'propositions'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.confidence","title":"<code>confidence: Mapped[Optional[int]]</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.created_at","title":"<code>created_at: Mapped[str] = mapped_column(DateTime(timezone=True), server_default=func.now(), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.decay","title":"<code>decay: Mapped[Optional[int]]</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.id","title":"<code>id: Mapped[int] = mapped_column(primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.observations","title":"<code>observations: Mapped[set[Observation]] = relationship('Observation', secondary=observation_proposition, back_populates='propositions', collection_class=set, passive_deletes=True, lazy='selectin')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.parents","title":"<code>parents: Mapped[set['Proposition']] = relationship('Proposition', secondary=proposition_parent, primaryjoin=id == proposition_parent.c.child_id, secondaryjoin=id == proposition_parent.c.parent_id, backref='children', collection_class=set, lazy='selectin')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.reasoning","title":"<code>reasoning: Mapped[str] = mapped_column(Text, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.revision_group","title":"<code>revision_group: Mapped[str] = mapped_column(String(36), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.text","title":"<code>text: Mapped[str] = mapped_column(Text, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.updated_at","title":"<code>updated_at: Mapped[str] = mapped_column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition.version","title":"<code>version: Mapped[int] = mapped_column(Integer, server_default='1', nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/models/#gum.models.Proposition-functions","title":"Functions","text":""},{"location":"api-reference/models/#gum.models.Proposition.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"<p>String representation of the proposition.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representation showing the proposition ID and a preview of its text.</p> Source code in <code>gum/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the proposition.\n\n    Returns:\n        str: A string representation showing the proposition ID and a preview of its text.\n    \"\"\"\n    preview = (self.text[:27] + \"\u2026\") if len(self.text) &gt; 30 else self.text\n    return f\"&lt;Proposition(id={self.id}, text={preview})&gt;\"\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install GUM and its dependencies.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<p>The simplest way to install GUM is using pip:</p> <pre><code>pip install gum-ai\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<p>To install from source:</p> <ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/generalusermodels/gum.git\ncd gum\n</code></pre></p> </li> <li> <p>Install the package: <pre><code>pip install -e .\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that GUM is installed correctly, you can run:</p> <pre><code>import gum\nprint(gum.__version__)\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>GUM has the following main dependencies: - numpy - pandas - scikit-learn - torch (optional, for deep learning features)</p> <p>These will be automatically installed when you install GUM using pip.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ol> <li> <p>Make sure you have the latest version of pip: <pre><code>pip install --upgrade pip\n</code></pre></p> </li> <li> <p>If you're using a virtual environment, ensure it's activated before installation.</p> </li> <li> <p>For any specific error messages, please check our GitHub issues or create a new one. </p> </li> </ol>"}]}